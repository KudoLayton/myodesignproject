// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Sensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sensor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  Sensor_descriptor_ = file->message_type(0);
  static const int Sensor_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, arg0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, arg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, arg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, arg3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, arg4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, arg5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, arg6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, arg7_),
  };
  Sensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Sensor_descriptor_,
      Sensor::default_instance_,
      Sensor_offsets_,
      -1,
      -1,
      -1,
      sizeof(Sensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Sensor_descriptor_, &Sensor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  delete Sensor::default_instance_;
  delete Sensor_reflection_;
}

void protobuf_AddDesc_data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\"x\n\006Sensor\022\014\n\004arg0\030\001 \001(\002\022\014\n\004"
    "arg1\030\002 \001(\002\022\014\n\004arg2\030\003 \001(\002\022\014\n\004arg3\030\004 \001(\002\022\014"
    "\n\004arg4\030\005 \001(\002\022\014\n\004arg5\030\006 \001(\002\022\014\n\004arg6\030\007 \001(\002"
    "\022\014\n\004arg7\030\010 \001(\002b\006proto3", 142);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  Sensor::default_instance_ = new Sensor();
  Sensor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sensor::kArg0FieldNumber;
const int Sensor::kArg1FieldNumber;
const int Sensor::kArg2FieldNumber;
const int Sensor::kArg3FieldNumber;
const int Sensor::kArg4FieldNumber;
const int Sensor::kArg5FieldNumber;
const int Sensor::kArg6FieldNumber;
const int Sensor::kArg7FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sensor::Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Sensor)
}

void Sensor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Sensor::Sensor(const Sensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Sensor)
}

void Sensor::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  arg0_ = 0;
  arg1_ = 0;
  arg2_ = 0;
  arg3_ = 0;
  arg4_ = 0;
  arg5_ = 0;
  arg6_ = 0;
  arg7_ = 0;
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:Sensor)
  SharedDtor();
}

void Sensor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sensor_descriptor_;
}

const Sensor& Sensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

Sensor* Sensor::default_instance_ = NULL;

Sensor* Sensor::New(::google::protobuf::Arena* arena) const {
  Sensor* n = new Sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sensor::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Sensor*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(arg0_, arg7_);

#undef ZR_HELPER_
#undef ZR_

}

bool Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float arg0 = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arg0_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_arg1;
        break;
      }

      // optional float arg1 = 2;
      case 2: {
        if (tag == 21) {
         parse_arg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arg1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_arg2;
        break;
      }

      // optional float arg2 = 3;
      case 3: {
        if (tag == 29) {
         parse_arg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arg2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_arg3;
        break;
      }

      // optional float arg3 = 4;
      case 4: {
        if (tag == 37) {
         parse_arg3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arg3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_arg4;
        break;
      }

      // optional float arg4 = 5;
      case 5: {
        if (tag == 45) {
         parse_arg4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arg4_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_arg5;
        break;
      }

      // optional float arg5 = 6;
      case 6: {
        if (tag == 53) {
         parse_arg5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arg5_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_arg6;
        break;
      }

      // optional float arg6 = 7;
      case 7: {
        if (tag == 61) {
         parse_arg6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arg6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_arg7;
        break;
      }

      // optional float arg7 = 8;
      case 8: {
        if (tag == 69) {
         parse_arg7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &arg7_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Sensor)
  return false;
#undef DO_
}

void Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Sensor)
  // optional float arg0 = 1;
  if (this->arg0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->arg0(), output);
  }

  // optional float arg1 = 2;
  if (this->arg1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->arg1(), output);
  }

  // optional float arg2 = 3;
  if (this->arg2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->arg2(), output);
  }

  // optional float arg3 = 4;
  if (this->arg3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->arg3(), output);
  }

  // optional float arg4 = 5;
  if (this->arg4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->arg4(), output);
  }

  // optional float arg5 = 6;
  if (this->arg5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->arg5(), output);
  }

  // optional float arg6 = 7;
  if (this->arg6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->arg6(), output);
  }

  // optional float arg7 = 8;
  if (this->arg7() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->arg7(), output);
  }

  // @@protoc_insertion_point(serialize_end:Sensor)
}

::google::protobuf::uint8* Sensor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Sensor)
  // optional float arg0 = 1;
  if (this->arg0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->arg0(), target);
  }

  // optional float arg1 = 2;
  if (this->arg1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->arg1(), target);
  }

  // optional float arg2 = 3;
  if (this->arg2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->arg2(), target);
  }

  // optional float arg3 = 4;
  if (this->arg3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->arg3(), target);
  }

  // optional float arg4 = 5;
  if (this->arg4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->arg4(), target);
  }

  // optional float arg5 = 6;
  if (this->arg5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->arg5(), target);
  }

  // optional float arg6 = 7;
  if (this->arg6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->arg6(), target);
  }

  // optional float arg7 = 8;
  if (this->arg7() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->arg7(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Sensor)
  return target;
}

int Sensor::ByteSize() const {
  int total_size = 0;

  // optional float arg0 = 1;
  if (this->arg0() != 0) {
    total_size += 1 + 4;
  }

  // optional float arg1 = 2;
  if (this->arg1() != 0) {
    total_size += 1 + 4;
  }

  // optional float arg2 = 3;
  if (this->arg2() != 0) {
    total_size += 1 + 4;
  }

  // optional float arg3 = 4;
  if (this->arg3() != 0) {
    total_size += 1 + 4;
  }

  // optional float arg4 = 5;
  if (this->arg4() != 0) {
    total_size += 1 + 4;
  }

  // optional float arg5 = 6;
  if (this->arg5() != 0) {
    total_size += 1 + 4;
  }

  // optional float arg6 = 7;
  if (this->arg6() != 0) {
    total_size += 1 + 4;
  }

  // optional float arg7 = 8;
  if (this->arg7() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sensor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Sensor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Sensor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sensor::MergeFrom(const Sensor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.arg0() != 0) {
    set_arg0(from.arg0());
  }
  if (from.arg1() != 0) {
    set_arg1(from.arg1());
  }
  if (from.arg2() != 0) {
    set_arg2(from.arg2());
  }
  if (from.arg3() != 0) {
    set_arg3(from.arg3());
  }
  if (from.arg4() != 0) {
    set_arg4(from.arg4());
  }
  if (from.arg5() != 0) {
    set_arg5(from.arg5());
  }
  if (from.arg6() != 0) {
    set_arg6(from.arg6());
  }
  if (from.arg7() != 0) {
    set_arg7(from.arg7());
  }
}

void Sensor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor::CopyFrom(const Sensor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {

  return true;
}

void Sensor::Swap(Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sensor::InternalSwap(Sensor* other) {
  std::swap(arg0_, other->arg0_);
  std::swap(arg1_, other->arg1_);
  std::swap(arg2_, other->arg2_);
  std::swap(arg3_, other->arg3_);
  std::swap(arg4_, other->arg4_);
  std::swap(arg5_, other->arg5_);
  std::swap(arg6_, other->arg6_);
  std::swap(arg7_, other->arg7_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sensor_descriptor_;
  metadata.reflection = Sensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sensor

// optional float arg0 = 1;
void Sensor::clear_arg0() {
  arg0_ = 0;
}
 float Sensor::arg0() const {
  // @@protoc_insertion_point(field_get:Sensor.arg0)
  return arg0_;
}
 void Sensor::set_arg0(float value) {
  
  arg0_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg0)
}

// optional float arg1 = 2;
void Sensor::clear_arg1() {
  arg1_ = 0;
}
 float Sensor::arg1() const {
  // @@protoc_insertion_point(field_get:Sensor.arg1)
  return arg1_;
}
 void Sensor::set_arg1(float value) {
  
  arg1_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg1)
}

// optional float arg2 = 3;
void Sensor::clear_arg2() {
  arg2_ = 0;
}
 float Sensor::arg2() const {
  // @@protoc_insertion_point(field_get:Sensor.arg2)
  return arg2_;
}
 void Sensor::set_arg2(float value) {
  
  arg2_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg2)
}

// optional float arg3 = 4;
void Sensor::clear_arg3() {
  arg3_ = 0;
}
 float Sensor::arg3() const {
  // @@protoc_insertion_point(field_get:Sensor.arg3)
  return arg3_;
}
 void Sensor::set_arg3(float value) {
  
  arg3_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg3)
}

// optional float arg4 = 5;
void Sensor::clear_arg4() {
  arg4_ = 0;
}
 float Sensor::arg4() const {
  // @@protoc_insertion_point(field_get:Sensor.arg4)
  return arg4_;
}
 void Sensor::set_arg4(float value) {
  
  arg4_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg4)
}

// optional float arg5 = 6;
void Sensor::clear_arg5() {
  arg5_ = 0;
}
 float Sensor::arg5() const {
  // @@protoc_insertion_point(field_get:Sensor.arg5)
  return arg5_;
}
 void Sensor::set_arg5(float value) {
  
  arg5_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg5)
}

// optional float arg6 = 7;
void Sensor::clear_arg6() {
  arg6_ = 0;
}
 float Sensor::arg6() const {
  // @@protoc_insertion_point(field_get:Sensor.arg6)
  return arg6_;
}
 void Sensor::set_arg6(float value) {
  
  arg6_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg6)
}

// optional float arg7 = 8;
void Sensor::clear_arg7() {
  arg7_ = 0;
}
 float Sensor::arg7() const {
  // @@protoc_insertion_point(field_get:Sensor.arg7)
  return arg7_;
}
 void Sensor::set_arg7(float value) {
  
  arg7_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg7)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
