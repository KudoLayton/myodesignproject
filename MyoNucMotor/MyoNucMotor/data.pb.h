// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class Sensor;

// ===================================================================

class Sensor : public ::google::protobuf::Message {
 public:
  Sensor();
  virtual ~Sensor();

  Sensor(const Sensor& from);

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sensor& default_instance();

  void Swap(Sensor* other);

  // implements Message ----------------------------------------------

  inline Sensor* New() const { return New(NULL); }

  Sensor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sensor& from);
  void MergeFrom(const Sensor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Sensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float arg0 = 1;
  void clear_arg0();
  static const int kArg0FieldNumber = 1;
  float arg0() const;
  void set_arg0(float value);

  // optional float arg1 = 2;
  void clear_arg1();
  static const int kArg1FieldNumber = 2;
  float arg1() const;
  void set_arg1(float value);

  // optional float arg2 = 3;
  void clear_arg2();
  static const int kArg2FieldNumber = 3;
  float arg2() const;
  void set_arg2(float value);

  // optional float arg3 = 4;
  void clear_arg3();
  static const int kArg3FieldNumber = 4;
  float arg3() const;
  void set_arg3(float value);

  // optional float arg4 = 5;
  void clear_arg4();
  static const int kArg4FieldNumber = 5;
  float arg4() const;
  void set_arg4(float value);

  // @@protoc_insertion_point(class_scope:Sensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float arg0_;
  float arg1_;
  float arg2_;
  float arg3_;
  float arg4_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static Sensor* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Sensor

// optional float arg0 = 1;
inline void Sensor::clear_arg0() {
  arg0_ = 0;
}
inline float Sensor::arg0() const {
  // @@protoc_insertion_point(field_get:Sensor.arg0)
  return arg0_;
}
inline void Sensor::set_arg0(float value) {
  
  arg0_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg0)
}

// optional float arg1 = 2;
inline void Sensor::clear_arg1() {
  arg1_ = 0;
}
inline float Sensor::arg1() const {
  // @@protoc_insertion_point(field_get:Sensor.arg1)
  return arg1_;
}
inline void Sensor::set_arg1(float value) {
  
  arg1_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg1)
}

// optional float arg2 = 3;
inline void Sensor::clear_arg2() {
  arg2_ = 0;
}
inline float Sensor::arg2() const {
  // @@protoc_insertion_point(field_get:Sensor.arg2)
  return arg2_;
}
inline void Sensor::set_arg2(float value) {
  
  arg2_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg2)
}

// optional float arg3 = 4;
inline void Sensor::clear_arg3() {
  arg3_ = 0;
}
inline float Sensor::arg3() const {
  // @@protoc_insertion_point(field_get:Sensor.arg3)
  return arg3_;
}
inline void Sensor::set_arg3(float value) {
  
  arg3_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg3)
}

// optional float arg4 = 5;
inline void Sensor::clear_arg4() {
  arg4_ = 0;
}
inline float Sensor::arg4() const {
  // @@protoc_insertion_point(field_get:Sensor.arg4)
  return arg4_;
}
inline void Sensor::set_arg4(float value) {
  
  arg4_ = value;
  // @@protoc_insertion_point(field_set:Sensor.arg4)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
